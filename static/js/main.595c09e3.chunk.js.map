{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","username","className","style","backgroundColor","src","alt","CardList","robots","map","user","i","key","SearchBox","search","searchChange","type","placeholder","onChange","Scroll","props","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","console","log","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","res","json","users","filteredRobo","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"4OAeeA,EAZF,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,GAAIC,EAA4B,EAA5BA,KAAgBC,GAAY,EAAtBC,SAAsB,EAAZD,OAClC,OACE,yBAAKE,UAAU,uCAAuCC,MAAO,CAAEC,gBAAiB,YAC9E,yBAAKC,IAAG,+BAA0BP,EAA1B,YAAwCQ,IAAI,SACpD,6BACE,4BAAKP,GACL,2BAAIC,MCeGO,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OAAQ,kBAAC,EAAD,CACNC,IAAKD,EACLb,GAAIY,EAAKZ,GACTC,KAAMW,EAAKX,KACXE,SAAUS,EAAKT,SACfD,MAAOU,EAAKV,aCATa,EAbG,SAAC,GAA6B,EAA3BC,OAA4B,IAApBC,EAAmB,EAAnBA,aAC3B,OACE,yBAAKb,UAAU,OACb,2BACEA,UAAU,mCACVc,KAAK,SACLC,YAAY,cACZC,SAAUH,MCOHI,EAdA,SAACC,GACd,OACE,yBACEjB,MAAO,CACLkB,UAAW,SACXC,OAAQ,kBACRC,OAAQ,UAGTH,EAAMI,WCgBEC,E,kDAxBb,WAAYL,GAAQ,IAAD,8BACjB,cAAMA,IACDM,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GACvBC,QAAQC,IAAI,aAAcH,EAAO,QAASC,GAC1CG,KAAKC,SAAS,CACZN,UAAU,M,+BAKZ,OAAIK,KAAKN,MAAMC,SACN,0DAEAK,KAAKZ,MAAMI,a,GAnBGU,aCuDZC,G,wDA/Cb,aAAe,IAAD,8BACZ,gBAaFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CACZnB,OAAQuB,EAAMC,OAAOC,SAdvB,EAAKb,MAAQ,CACXlB,OAAQ,GACRM,OAAQ,IAJE,E,gEAQO,IAAD,OAClB0B,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAEzB,OAAQoC,S,+BASjC,IAAD,EACoBZ,KAAKN,MAAxBlB,EADD,EACCA,OAAQM,EADT,EACSA,OACV+B,EAAerC,EAAOsC,QAAO,SAAAC,GACjC,OAAOA,EAAMhD,KAAKiD,cAAcC,SAASnC,EAAOkC,kBAGlD,OAASxC,EAAO0C,OAIZ,yBAAKhD,UAAU,MACb,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CACEY,OAAQA,EACRC,aAAciB,KAAKI,iBAErB,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU5B,OAAQqC,OAX1B,wBAAI3C,UAAU,SAAd,kB,GA5BYgC,cCGEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLE,QAAQF,MAAMA,EAAMuC,a","file":"static/js/main.595c09e3.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst Card = ({ id, name, username, email }) => {\n  return (\n    <div className=\"tc dib br3 pa3 ma2 grow bw2 shadow-5\" style={{ backgroundColor: '#00DBDE' }}>\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robo\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card","import React from 'react'\n\n\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (<Card\n            key={i}\n            id={user.id}\n            name={user.name}\n            username={user.username}\n            email={user.email}\n          />\n          )\n        })\n      }\n    </div>\n  )\n}\n\nexport default CardList","import React from 'react'\n\nconst SearchBox = ({ search, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robo\"\n        onChange={searchChange}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox","import React from 'react'\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        overflowY: 'scroll',\n        border: '1px solid black',\n        height: '800px'\n      }}\n    >\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll","import React, { Component } from 'react'\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    console.log('catch-----', error, '-----', info)\n    this.setState({\n      hasError: true\n    })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops... that is not good</h1>\n    } else {\n      return this.props.children\n    }\n  }\n}\n\n\nexport default ErrorBoundry","import React, { Component } from 'react'\n\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/scroll'\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport { robots } from '../robots'\nimport './App.css'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      search: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(users => this.setState({ robots: users }))\n  }\n\n  onSearchChange = (event) => {\n    this.setState({\n      search: event.target.value\n    })\n  }\n\n  render() {\n    const { robots, search } = this.state\n    const filteredRobo = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(search.toLowerCase())\n    })\n\n    return (!robots.length) ?\n      <h1 className=\"tc f1\">Loading...</h1>\n      :\n      (\n        <div className=\"tc\">\n          <h1 className=\"f1\">Robo Friends</h1>\n          <SearchBox\n            search={search}\n            searchChange={this.onSearchChange}\n          />\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={filteredRobo} />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      )\n  }\n}\n\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}