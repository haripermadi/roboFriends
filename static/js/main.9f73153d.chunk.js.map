{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","username","className","style","backgroundColor","src","alt","CardList","robots","console","log","map","user","i","key","SearchBox","search","searchChange","type","placeholder","onChange","Scroll","props","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","color","onClick","PureComponent","Header","App","onrequestRobots","searchField","onSearchChange","isPending","filteredRobo","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","res","json","users","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9f73153d.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst Card = ({ id, name, username, email }) => {\n  return (\n    <div className=\"tc dib br3 pa3 ma2 grow bw2 shadow-5\" style={{ backgroundColor: '#00DBDE' }}>\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robo\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card","import React from 'react'\n\n\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n  console.log('Cardlist----')\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (<Card\n            key={i}\n            id={user.id}\n            name={user.name}\n            username={user.username}\n            email={user.email}\n          />\n          )\n        })\n      }\n    </div>\n  )\n}\n\nexport default CardList","import React from 'react'\n\nconst SearchBox = ({ search, searchChange }) => {\n  console.log('scrollbox')\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robo\"\n        onChange={searchChange}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox","import React from 'react'\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        overflowY: 'scroll',\n        border: '1px solid black',\n        height: '800px'\n      }}\n    >\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll","import React, { Component } from 'react'\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    console.log('catch-----', error, '-----', info)\n    this.setState({\n      hasError: true\n    })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops... that is not good</h1>\n    } else {\n      return this.props.children\n    }\n  }\n}\n\n\nexport default ErrorBoundry","import React, { PureComponent } from 'react'\n\nclass CounterButton extends PureComponent {\n  constructor() {\n    super()\n    this.state = {\n      count: 0\n    }\n  }\n\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   if (this.state.count !== nextState.count) {\n  //     return true\n  //   } else {\n  //     return false\n  //   }\n  // }\n\n  updateCount = () => {\n    this.setState(state => {\n      return { count: state.count + 1 }\n    })\n  }\n\n  render() {\n    console.log('counterbutton---')\n    return (\n      <button color={this.props.color} onClick={this.updateCount}>Count : {this.state.count}</button>\n    )\n  }\n}\n\nexport default CounterButton","import React, { PureComponent } from 'react'\n\nimport CounterButton from './CounterButton'\n\nclass Header extends PureComponent {\n\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   // console.log('shouldheader----', nextProps, '---', nextState)\n  //   return false\n  // }\n\n  render() {\n    console.log('header---')\n    return (\n      <div>\n        <h1 className=\"f1\">Robo Friends</h1>\n        <CounterButton color={'red'} />\n      </div>\n    )\n  }\n}\n\nexport default Header","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/scroll'\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport Header from '../components/Header'\nimport './App.css'\n\nimport { setSearchField, requestRobots } from '../actions'\n\nconst mapStateToProps = state => {\n  // console.log('map---', state)\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onrequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n\n  componentDidMount() {\n    // console.log('store----', this.props)\n    // fetch('https://jsonplaceholder.typicode.com/users')\n    //   .then(res => res.json())\n    //   .then(users => this.setState({ robots: users }))\n    this.props.onrequestRobots()\n  }\n\n  // onSearchChange = (event) => {\n  //   this.setState({\n  //     search: event.target.value\n  //   })\n  // }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props\n    const filteredRobo = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n\n    return (isPending) ?\n      <h1 className=\"tc f1\">Loading...</h1>\n      :\n      (\n        <div className=\"tc\">\n          <Header />\n          <SearchBox\n            search={searchField}\n            searchChange={onSearchChange}\n          />\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={filteredRobo} />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      )\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import {\n  CHANGE_SEARCH_FIELD,\n  FETCH_ROBOTS_PENDING,\n  FETCH_ROBOTS_SUCCESS,\n  FETCH_ROBOTS_FAILED\n} from './constants'\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({\n    type: FETCH_ROBOTS_PENDING\n  })\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(users => dispatch({\n      type: FETCH_ROBOTS_SUCCESS,\n      payload: users\n    }))\n    .catch(error => dispatch({\n      type: FETCH_ROBOTS_FAILED,\n      payload: error\n    }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\nexport const FETCH_ROBOTS_PENDING = 'FETCH_ROBOTS_PENDING'\nexport const FETCH_ROBOTS_SUCCESS = 'FETCH_ROBOTS_SUCCESS'\nexport const FETCH_ROBOTS_FAILED = 'FETCH_ROBOTS_FAILED'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  FETCH_ROBOTS_PENDING,\n  FETCH_ROBOTS_SUCCESS,\n  FETCH_ROBOTS_FAILED\n} from './constants'\n\nconst initialStateSearch = {\n  searchField: '',\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload })\n    // return {... state,  searchField: action.payload }\n    default:\n      return state\n  }\n}\n\nconst initialStateRobots = {\n  robots: [],\n  isPending: false,\n  error: ''\n}\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case FETCH_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true })\n    case FETCH_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false }\n    case FETCH_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false }\n    default:\n      return state\n  }\n}","import './wdyr'\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\n\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\nimport { searchRobots, requestRobots } from './reducers'\n\nconst logger = createLogger()\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}